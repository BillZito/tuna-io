define({ "api": [  {    "type": "get",    "url": "/api/isalive",    "title": "Check if server is running",    "name": "IsAlivea",    "group": "Miscellaneous",    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n\"I'm Alive\"",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found\nFailed to connect to localhost port 3000: Connection refused",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "./server/src/routes/handlers.go",    "groupTitle": "Miscellaneous"  },  {    "type": "get",    "url": "/api/users/authenticate Verify a user's credentials and retrieve",    "title": "their username from the encrypted session",    "name": "AuthenticateUser",    "group": "Users",    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\nchris",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\nhttp: named cookie not present",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "./server/src/routes/handlers.go",    "groupTitle": "Users"  },  {    "type": "post",    "url": "/users/login",    "title": "Attempt to login a user with the given credentials",    "name": "LoginUser",    "group": "Users",    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\nUser successfully logged in!",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\nIncorrect credentials provided!",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "./server/src/routes/handlers.go",    "groupTitle": "Users"  },  {    "type": "get",    "url": "/api/users/logout",    "title": "Clear a user's encrypted session cookies",    "name": "LogoutUser",    "group": "Users",    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\nCookies successfully cleared!",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "./server/src/routes/handlers.go",    "groupTitle": "Users"  },  {    "type": "post",    "url": "/api/users/register",    "title": "Register a new user",    "name": "RegisterUser",    "group": "Users",    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 201 Created",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\nUsername already exists!",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "./server/src/routes/handlers.go",    "groupTitle": "Users"  },  {    "type": "post",    "url": "/api/videos",    "title": "Create, transcribe, and store a new video",    "name": "CreateVideo",    "group": "Videos",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "title",            "description": "<p>Title of video</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "url",            "description": "<p>Link to CDN URL where video is stored</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "creator",            "description": "<p>Username of video uploader</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": false,            "field": "private",            "description": "<p>True/False, whether the video is private</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n(Response truncated for brevity)\n{\n  \"success\": \"Successfully uploaded and transcribed video file\"\n  \"hash\": b12c8a16bbe30b9d79cbaab81a82151d\"\n  \"url\": \"https://s3-us-west-1.amazonaws.com/invalidmemories/bill_10s.mp4\"\n  \"transcript\": \"{\n    \"Words\":[\n      {\"Token\":\"do\",\"Begin\":2.4,\"End\":2.47,\"Confidence\":0.09763},\n      {\"Token\":\"you\",\"Begin\":2.47,\"End\":2.58,\"Confidence\":0.45060},\n      ...\n    ]\n  }\"",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\nRedigo failed to create and store the video",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "./server/src/routes/handlers.go",    "groupTitle": "Videos"  },  {    "type": "get",    "url": "/api/videos/latest",    "title": "Get the 10 latest videos",    "name": "GetLatestVideos",    "group": "Videos",    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "  HTTP/1.1 200 OK\n[\n  {\n    \"comments\": \"[]\",\n    \"creator\": \"Bobby1\",\n    \"dislikes\": \"[]\",\n    \"hash\": \"b12c8a16bbe30b9d79cbaab81a82151d\",\n    \"likes\": \"[]\",\n    \"private\": \"0\",\n    \"timestamp\": \"2016-11-16 09:49:02.236181764 -0800 PST\",\n    \"title\": \"bill_11s.mp4\",\n    \"transcript\": \"null\",\n    \"url\": \"https://s3-us-west-1.amazonaws.com/invalidmemories/bill_10s.mp4\",\n    \"views\": \"0\"\n  },\n  {\n    \"comments\": \"[]\",\n    \"creator\": \"Bobby1\",\n    \"dislikes\": \"[]\",\n    \"hash\": \"083517446ac7100ef679c8f5004e810a\",\n    \"likes\": \"[]\",\n    \"private\": \"0\",\n    \"timestamp\": \"2016-11-16 11:56:26.509119987 -0800 PST\",\n    \"title\": \"test.mp4\",\n    \"transcript\": \"null\",\n    \"url\": \"https://s3-us-west-1.amazonaws.com/invalidmemories/test.mp4\",\n    \"views\": \"0\"\n  }\n]",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "./server/src/routes/handlers.go",    "groupTitle": "Videos"  },  {    "type": "get",    "url": "/api/videos/{hash}",    "title": "Retrieve a stored video",    "name": "GetVideo",    "group": "Videos",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "hash",            "description": "<p>Video hash</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n  \"title\": \"Sample Title\",\n  \"url\": \"https://s3-us-west-1.amazonaws.com/invalidmemories/bill_10s.mp4\",\n  \"hash\": \"b12c8a16bbe30b9d79cbaab81a82151d\",\n  \"creator\": \"chris\",\n  \"timestamp\": \"2016-11-12T17:17:19.308362547-08:00\",\n  \"private\": \"1\",\n  \"likes\": \"[]\",\n  \"dislikes\": \"[]\",\n  \"comments\": \"[]\"\n  \"views\": \"0\",\n  \"transcript\": (refer to example in `CreateVideo`)\n}",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found\nredigo: nil return",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "./server/src/routes/handlers.go",    "groupTitle": "Videos"  },  {    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "optional": false,            "field": "varname1",            "description": "<p>No type.</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "varname2",            "description": "<p>With type.</p>"          }        ]      }    },    "type": "",    "url": "",    "version": "0.0.0",    "filename": "./doc/main.js",    "group": "_Users_chriswt_Documents_hackreactor_projects_tuna_io_doc_main_js",    "groupTitle": "_Users_chriswt_Documents_hackreactor_projects_tuna_io_doc_main_js",    "name": ""  },  {    "type": "options",    "url": "/api/s3",    "title": "Allow cross-origin requests",    "name": "AllowAccess",    "group": "s3",    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n  \"Access-Control-Allow-Origin\": \"*\"\n  \"Access-Control-Allow-Methods\": \"POST, GET, OPTIONS, PUT, DELETE\"\n  \"Access-Control-Allow-Headers\":\n    \"Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token,\n     Authorization\"\n}",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "./server/src/routes/handlers.go",    "groupTitle": "s3"  },  {    "type": "post",    "url": "/api/s3",    "title": "Generate a signed url for uploading to s3",    "name": "SignVideo",    "group": "s3",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "file",            "description": "<p>name for upload</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n  \"https://invalidmemories.s3-us-west-1.amazonaws.com/test4.mp4\n  ?X-Amz-Algorithm=AWS4-HMAC-SHA256\n  &X-Amz-Credential=NOT_FOR_OTHERS_TO_SEEus-west-1%2Fs3%2Faws4_request\n  &X-Amz-Date=20161115T202301Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host\n  &X-Amz-Signature=SUPER_SECRET\"\n}",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 403 Permission denied (check your credentials!)",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "./server/src/routes/handlers.go",    "groupTitle": "s3"  }] });
