define({ "api": [  {    "type": "get",    "url": "/api/isalive",    "title": "Check if server is running",    "name": "IsAlivea",    "group": "Miscellaneous",    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n\"I'm Alive\"",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found\nFailed to connect to localhost port 3000: Connection refused",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "./server/src/routes/handlers.go",    "groupTitle": "Miscellaneous"  },  {    "type": "post",    "url": "/api/videos",    "title": "Create and store a new video",    "name": "CreateVideo",    "group": "Videos",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "title",            "description": "<p>Title of video</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "url",            "description": "<p>Link to CDN URL where video is stored</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "hash",            "description": "<p>Hashed path to URL (for client routing)</p>"          },          {            "group": "Parameter",            "type": "Number",            "optional": false,            "field": "author_id",            "description": "<p>Unique ID of video uploader</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": false,            "field": "private",            "description": "<p>True/False, whether the video is private</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\nOK",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found\nRedigo failed to create and store the video",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "./server/src/routes/handlers.go",    "groupTitle": "Videos"  },  {    "type": "get",    "url": "/api/videos/{url}",    "title": "Retrieve a stored video",    "name": "GetVideo",    "group": "Videos",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "url",            "description": "<p>Link to CDN URL where video is stored</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n  \"title\": \"Sample Title\",\n  \"url\": \"https://amazoncdn.com/bucketname/videotitle.webm\",\n  \"hash\": \"a1b2c3d4-e5f6g7h8\",\n  \"author_id\": 1,\n  \"timestamp\": \"2016-11-12T17:17:19.308362547-08:00\",\n  \"private\": true,\n  \"likes\": null,\n  \"dislikes\": null\n}",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found\nredigo: nil return",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "./server/src/routes/handlers.go",    "groupTitle": "Videos"  },  {    "type": "post",    "url": "/api/videos/process",    "title": "Processes a video and returns the transcript",    "name": "ProcessVideo",    "group": "Videos",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "url",            "description": "<p>Link to CDN URL where video is stored</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n(truncated for brevity)\n[\n  {word start_time end_time confidence},\n  {word start_time end_time confidence}, ...\n]",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found\nexit status 1 (Note that this error typically means that ffmpeg has failed)\nWatson says, \"not authorized\" (signifies IBM Watson authorization error)",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "./server/src/routes/handlers.go",    "groupTitle": "Videos"  },  {    "type": "OPTIONS",    "url": "/api/s3",    "title": "Allow cross-origin requests",    "name": "AllowAccess",    "group": "s3",    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n  \"Access-Control-Allow-Origin\": \"*\"\n    \"Access-Control-Allow-Methods\": \"POST, GET, OPTIONS, PUT, DELETE\"\n    \"Access-Control-Allow-Headers\":\n    \"Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization\"\n  }",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "./server/src/routes/handlers.go",    "groupTitle": "s3"  },  {    "type": "POST",    "url": "/api/s3",    "title": "Generate a signed url for uploading to s3",    "name": "SignVideo",    "group": "s3",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "file",            "description": "<p>name for upload</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n  \"https://invalidmemories.s3-us-west-1.amazonaws.com/test4.mp4\n    ?X-Amz-Algorithm=AWS4-HMAC-SHA256\n    &X-Amz-Credential=NOT_FOR_OTHERS_TO_SEEus-west-1%2Fs3%2Faws4_request\n    &X-Amz-Date=20161115T202301Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host\n    &X-Amz-Signature=SUPER_SECRET\"\n  }",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 403 Permission denied (check your credentials!)",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "./server/src/routes/handlers.go",    "groupTitle": "s3"  }] });
